// Generated by CoffeeScript 1.10.0
(function() {
  var Urls, path, urlBeheadedReg, urlHandlerF, urlReg;

  Urls = require("../models/urls.js");

  urlReg = /^(https?:\/\/)([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/;

  urlBeheadedReg = /^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/;

  path = process.cwd();

  urlHandlerF = function() {
    return {
      set: function(req, res) {
        var resObj, url;
        url = req.params[0];
        resObj = {
          longUrl: url
        };
        if (!urlReg.test(url)) {
          if (urlBeheadedReg.test(url)) {
            resObj.err = "url must begin with http:// or https://";
          } else {
            resObj.err = "not a valid url";
          }
          return res.send(JSON.stringify(resObj));
        } else {
          return Urls.findOne({
            url: url
          }).exec((function(_this) {
            return function(err, urlObj) {
              if (err) {
                throw err;
              }
              if (urlObj != null) {
                resObj.shortUrl = "" + process.env.APP_URL + urlObj.num;
                return res.send(JSON.stringify(resObj));
              } else {
                return Urls.find({}).sort({
                  num: -1
                }).limit(1).exec(function(err, high) {
                  var num, ref;
                  if (err) {
                    throw err;
                  }
                  num = ((high != null ? (ref = high[0]) != null ? ref.num : void 0 : void 0) || 0) + 1;
                  urlObj = new Urls({
                    num: num,
                    url: url
                  });
                  return urlObj.save(function(err, urlObj) {
                    if (err) {
                      throw err;
                    }
                    resObj.shortUrl = "" + process.env.APP_URL + urlObj.num;
                    return res.send(JSON.stringify(resObj));
                  });
                });
              }
            };
          })(this));
        }
      },
      get: function(req, res) {
        var num;
        num = req.params.num;
        if (isNaN(Number(num))) {
          return res.send("parameter must be a number");
        } else {
          return Urls.findOne({
            num: num
          }).exec(function(err, urlObj) {
            if (err) {
              throw err;
            }
            if ((urlObj != null ? urlObj.url : void 0) != null) {
              return res.send("<META HTTP-EQUIV='Refresh' CONTENT='5; URL=" + urlObj.url + "'>");
            } else {
              return res.send("not found");
            }
          });
        }
      }
    };
  };

  module.exports = urlHandlerF;

}).call(this);
